#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        EigerDectris.py
#
#  Project :     Eiger Detector
#
# This file is part of Tango device class.
#
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
#
#
#  $Author :      tnunez$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["EigerDectris", "EigerDectrisClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(EigerDectris.additionnal_import) ENABLED START -----#

from dectris_eiger.eiger import EigerDetector
import json

try:
    import EigerFilewriter
except:
    print "EigerFilewriter can not be imported"

try:
    import EigerMonitor
except:
    print "EigerMonitor can not be imported"
try:
    import EigerHiDRAClient
except:
    print "EigerHiDRAClient can not be imported"


import thread

# attr_list_w = ["photon_energy"]
# attr_list_r = ["detector_readout_time"]
reading_list = []

def writer_thread(prop, data)
    """This is to avoid the long timeouts when writing to some attributes.
        While writing the state of the device is "busy"
    """
    previous_status = self.get_status()
    self.set_status = "busy"
    try:
        prop = data
    except Exception as e:
        raise e

    self.set_status = previous_status

def reader_thread(prop, attr, read_value)
    """This is to avoid the long timeouts when reading some attributes.
    """
    global reading_list

    try:
        if attr in reading_list:  # do not read again if we are already reading
            return
        reading_list.append(attr)
        read_value = prop # for consistency
    except Exception as e:
        reading_list.pop(attr)
        raise e
    attr.set_value(read_value)
    reading_list.pop(attr)


#----- PROTECTED REGION END -----#	//	EigerDectris.additionnal_import

# Device States Description
# ON :
# FAULT :
# MOVING :
# OFF : The detector was rebooted and has to be initialized


class EigerDectris (PyTango.Device_4Impl):

    """Class for controlling the Eiger detector from Dectris"""

    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(EigerDectris.global_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	EigerDectris.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.debug_stream("In __init__()")
        EigerDectris.init_device(self)
        #----- PROTECTED REGION ID(EigerDectris.__init__) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	EigerDectris.__init__

    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(EigerDectris.delete_device) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	EigerDectris.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_NbImages_read = 0
        self.attr_Temperature_read = 0.0
        self.attr_Humidity_read = 0.0
        self.attr_CountTime_read = 0.0
        self.attr_FrameTime_read = 0.0
        self.attr_PhotonEnergy_read = 0.0
        self.attr_Wavelength_read = 0.0
        self.attr_EnergyThreshold_read = 0.0
        self.attr_FlatfieldEnabled_read = 0
        self.attr_AutoSummationEnabled_read = 0
        self.attr_TriggerMode_read = ""
        self.attr_RateCorrectionEnabled_read = 0
        self.attr_BitDepth_read = 0.0
        self.attr_ReadoutTime_read = 0.0
        self.attr_Description_read = ""
        self.attr_NbImagesMax_read = 0
        self.attr_NbImagesMin_read = 0
        self.attr_CountTimeMax_read = 0.0
        self.attr_CountTimeMin_read = 0.0
        self.attr_FrameTimeMax_read = 0.0
        self.attr_FrameTimeMin_read = 0.0
        self.attr_PhotonEnergyMax_read = 0.0
        self.attr_PhotonEnergyMin_read = 0.0
        self.attr_EnergyThresholdMax_read = 0.0
        self.attr_EnergyThresholdMin_read = 0.0
        self.attr_Time_read = ""
        self.attr_MustArmFlag_read = 0
        self.attr_NbTriggers_read = 0
        self.attr_NbTriggersMax_read = 0
        self.attr_NbTriggersMin_read = 0
        self.attr_CountTimeInte_read = 0.0
        self.attr_DownloadDirectory_read = ""
        self.attr_DcuBufferFree_read = 0.0
        self.attr_BeamCenterX_read = 0.0
        self.attr_BeamCenterY_read = 0.0
        self.attr_DetectorDistance_read = 0.0
        self.attr_OmegaIncrement_read = 0.0
        self.attr_OmegaStart_read = 0.0
        self.attr_Compression_read = ""
        self.attr_RoiMode_read = ""
        self.attr_XPixelSize_read = 0.0
        self.attr_YPixelSize_read = 0.0
        self.attr_XPixelsDetector_read = 0
        self.attr_YPixelsDetector_read = 0
        self.attr_FilesInBuffer_read = [""]
        self.attr_Error_read = [""]
        #----- PROTECTED REGION ID(EigerDectris.init_device) ENABLED START -----#

        nums = self.APIVersion.split(".")

        if int(nums[1]) > 2:
            self.PortNb = -1

        self.det = EigerDetector(self.Host, self.PortNb, self.APIVersion)

        self.flag_arm = 0

        try:
            self.attr_CountTimeMax_read = self.det.get_param_lim("count_time", "max")
            self.attr_CountTimeMin_read = self.det.get_param_lim("count_time", "min")
            self.attr_FrameTimeMax_read = self.det.get_param_lim("frame_time", "max")
            self.attr_FrameTimeMin_read = self.det.get_param_lim("frame_time", "min")
            self.attr_NbImagesMax_read = self.det.get_param_lim("nimages", "max")
            self.attr_NbImagesMin_read = self.det.get_param_lim("nimages", "min")
            self.attr_NbTriggersMax_read = self.det.get_param_lim("ntrigger", "max")
            self.attr_NbTriggersMin_read = self.det.get_param_lim("ntrigger", "min")
            self.attr_PhotonEnergyMax_read = self.det.get_param_lim("photon_energy", "max")
            self.attr_PhotonEnergyMin_read = self.det.get_param_lim("photon_energy", "min")
            self.attr_EnergyThresholdMax_read = self.det.get_param_lim("threshold_energy", "max")
            self.attr_EnergyThresholdMin_read = self.det.get_param_lim("threshold_energy", "min")
            self.attr_XPixelSize_read = self.det.x_pixel_size
            self.attr_YPixelSize_read = self.det.y_pixel_size
            self.attr_XPixelsDetector_read = self.det.x_pixels_detector
            self.attr_YPixelsDetector_read = self.det.y_pixels_detector
        except:
            print "Error reading parameter limit from detector"

        #----- PROTECTED REGION END -----#	//	EigerDectris.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(EigerDectris.always_executed_hook) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	EigerDectris.always_executed_hook

    # -------------------------------------------------------------------------
    #    EigerDectris read/write attribute methods
    # -------------------------------------------------------------------------

    def read_NbImages(self, attr):
        self.debug_stream("In read_NbImages()")
        #----- PROTECTED REGION ID(EigerDectris.NbImages_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_NbImages_read = self.det.nimages

        attr.set_value(self.attr_NbImages_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbImages_read

    def write_NbImages(self, attr):
        self.debug_stream("In write_NbImages()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.NbImages_write) ENABLED START -----#

        if data > self.attr_NbImagesMax_read or data < self.attr_NbImagesMin_read:
            raise Exception("Value %f out of limits (%e, %e)" % (data, self.attr_NbImagesMin_read, self.attr_NbImagesMax_read))

        self.det.nimages = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbImages_write

    def read_Temperature(self, attr):
        self.debug_stream("In read_Temperature()")
        #----- PROTECTED REGION ID(EigerDectris.Temperature_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            # Workaround: this might get fixed in api v1.8.x
            self.det.status_update()
            self.attr_Temperature_read = self.det.temperature
        attr.set_value(self.attr_Temperature_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Temperature_read

    def read_Humidity(self, attr):
        self.debug_stream("In read_Humidity()")
        #----- PROTECTED REGION ID(EigerDectris.Humidity_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            # Workaround: this might get fixed in api v1.8.x
            self.det.status_update()
            self.attr_Humidity_read = self.det.humidity
        attr.set_value(self.attr_Humidity_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Humidity_read

    def read_CountTime(self, attr):
        self.debug_stream("In read_CountTime()")
        #----- PROTECTED REGION ID(EigerDectris.CountTime_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_CountTime_read = self.det.count_time
        attr.set_value(self.attr_CountTime_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.CountTime_read

    def write_CountTime(self, attr):
        self.debug_stream("In write_CountTime()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.CountTime_write) ENABLED START -----#

        if data > self.attr_CountTimeMax_read or data < self.attr_CountTimeMin_read:
            raise Exception("Value %f out of limits (%e, %e)" % (data, self.attr_CountTimeMin_read, self.attr_CountTimeMax_read))

        self.det.count_time = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.CountTime_write

    def read_FrameTime(self, attr):
        self.debug_stream("In read_FrameTime()")
        #----- PROTECTED REGION ID(EigerDectris.FrameTime_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_FrameTime_read = self.det.frame_time
            self.attr_FrameTimeMax_read = self.det.get_param_lim("frame_time", "max")
            self.attr_FrameTimeMin_read = self.det.get_param_lim("frame_time", "min")
        attr.set_value(self.attr_FrameTime_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.FrameTime_read

    def write_FrameTime(self, attr):
        self.debug_stream("In write_FrameTime()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.FrameTime_write) ENABLED START -----#

        if data > self.attr_FrameTimeMax_read or data < self.attr_FrameTimeMin_read:
            raise Exception("Value %f out of limits (%e, %e)" % (data, self.attr_FrameTimeMin_read, self.attr_FrameTimeMax_read))

        self.det.frame_time = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.FrameTime_write

    def read_PhotonEnergy(self, attr):
        self.debug_stream("In read_PhotonEnergy()")
        #----- PROTECTED REGION ID(EigerDectris.PhotonEnergy_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_PhotonEnergy_read = self.det.energy
        attr.set_value(self.attr_PhotonEnergy_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.PhotonEnergy_read

    def write_PhotonEnergy(self, attr):
        self.debug_stream("In write_PhotonEnergy()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.PhotonEnergy_write) ENABLED START -----#

        if data > self.attr_PhotonEnergyMax_read or data < self.attr_PhotonEnergyMin_read:
            raise Exception("Value %f out of limits (%e, %e)" % (data, self.attr_PhotonEnergyMin_read, self.attr_PhotonEnergyMax_read))
        
        thread.start_new_thread(writer_thread, self.det.energy, data)

        # self.det.energy = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.PhotonEnergy_write

    def read_Wavelength(self, attr):
        self.debug_stream("In read_Wavelength()")
        #----- PROTECTED REGION ID(EigerDectris.Wavelength_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_Wavelength_read = self.det.wavelength
        attr.set_value(self.attr_Wavelength_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Wavelength_read

    def write_Wavelength(self, attr):
        self.debug_stream("In write_Wavelength()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.Wavelength_write) ENABLED START -----#

        self.det.wavelength = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.Wavelength_write

    def read_EnergyThreshold(self, attr):
        self.debug_stream("In read_EnergyThreshold()")
        #----- PROTECTED REGION ID(EigerDectris.EnergyThreshold_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_EnergyThreshold_read = self.det.threshold
        attr.set_value(self.attr_EnergyThreshold_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.EnergyThreshold_read

    def write_EnergyThreshold(self, attr):
        self.debug_stream("In write_EnergyThreshold()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.EnergyThreshold_write) ENABLED START -----#

        if data > self.attr_EnergyThresholdMax_read or data < self.attr_EnergyThresholdMin_read:
            raise Exception("Value %f out of limits (%e, %e)" % (data, self.attr_EnergyThresholdMin_read, self.attr_EnergyThresholdMax_read))

        self.det.threshold = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.EnergyThreshold_write

    def read_FlatfieldEnabled(self, attr):
        self.debug_stream("In read_FlatfieldEnabled()")
        #----- PROTECTED REGION ID(EigerDectris.FlatfieldEnabled_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_FlatfieldEnabled_read = 0
            if self.det.flatfield_enabled == True:
                self.attr_FlatfieldEnabled_read = 1

        attr.set_value(self.attr_FlatfieldEnabled_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.FlatfieldEnabled_read

    def write_FlatfieldEnabled(self, attr):
        self.debug_stream("In write_FlatfieldEnabled()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.FlatfieldEnabled_write) ENABLED START -----#

        if data == 0:
            self.det.flatfield_enabled = False
        else:
            self.det.flatfield_enabled = True
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.FlatfieldEnabled_write

    def read_AutoSummationEnabled(self, attr):
        self.debug_stream("In read_AutoSummationEnabled()")
        #----- PROTECTED REGION ID(EigerDectris.AutoSummationEnabled_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_AutoSummationEnabled_read = 0
            if self.det.auto_summation_enabled == True:
                self.attr_AutoSummationEnabled_read = 1

        attr.set_value(self.attr_AutoSummationEnabled_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.AutoSummationEnabled_read

    def write_AutoSummationEnabled(self, attr):
        self.debug_stream("In write_AutoSummationEnabled()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.AutoSummationEnabled_write) ENABLED START -----#

        if data == 0:
            self.det.auto_summation_enabled = False
        else:
            self.det.auto_summation_enabled = True
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.AutoSummationEnabled_write

    def read_TriggerMode(self, attr):
        self.debug_stream("In read_TriggerMode()")
        #----- PROTECTED REGION ID(EigerDectris.TriggerMode_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_TriggerMode_read = self.det.trigger_mode
        attr.set_value(self.attr_TriggerMode_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.TriggerMode_read

    def write_TriggerMode(self, attr):
        self.debug_stream("In write_TriggerMode()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.TriggerMode_write) ENABLED START -----#

        self.det.trigger_mode = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.TriggerMode_write

    def read_RateCorrectionEnabled(self, attr):
        self.debug_stream("In read_RateCorrectionEnabled()")
        #----- PROTECTED REGION ID(EigerDectris.RateCorrectionEnabled_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_RateCorrectionEnabled_read = 0
            if self.det.rate_correction_enabled == True:
                self.attr_RateCorrectionEnabled_read = 1
        attr.set_value(self.attr_RateCorrectionEnabled_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.RateCorrectionEnabled_read

    def write_RateCorrectionEnabled(self, attr):
        self.debug_stream("In write_RateCorrectionEnabled()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.RateCorrectionEnabled_write) ENABLED START -----#

        if data == 0:
            self.det.rate_correction_enabled = False
        else:
            self.det.rate_correction_enabled = True
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.RateCorrectionEnabled_write

    def read_BitDepth(self, attr):
        self.debug_stream("In read_BitDepth()")
        #----- PROTECTED REGION ID(EigerDectris.BitDepth_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_BitDepth_read = self.det.bit_depth
        attr.set_value(self.attr_BitDepth_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.BitDepth_read

    def read_ReadoutTime(self, attr):
        self.debug_stream("In read_ReadoutTime()")
        #----- PROTECTED REGION ID(EigerDectris.ReadoutTime_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            # self.attr_ReadoutTime_read = self.det.readout_time
            thread.start_new_thread(reader_thread, self.det.readout_time, attr, self.attr_ReadoutTime_read)
        #attr.set_value(self.attr_ReadoutTime_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.ReadoutTime_read

    def read_Description(self, attr):
        self.debug_stream("In read_Description()")
        #----- PROTECTED REGION ID(EigerDectris.Description_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_Description_read = self.det.description
        attr.set_value(self.attr_Description_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Description_read

    def read_NbImagesMax(self, attr):
        self.debug_stream("In read_NbImagesMax()")
        #----- PROTECTED REGION ID(EigerDectris.NbImagesMax_read) ENABLED START -----#

        attr.set_value(self.attr_NbImagesMax_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbImagesMax_read

    def read_NbImagesMin(self, attr):
        self.debug_stream("In read_NbImagesMin()")
        #----- PROTECTED REGION ID(EigerDectris.NbImagesMin_read) ENABLED START -----#

        attr.set_value(self.attr_NbImagesMin_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbImagesMin_read

    def read_CountTimeMax(self, attr):
        self.debug_stream("In read_CountTimeMax()")
        #----- PROTECTED REGION ID(EigerDectris.CountTimeMax_read) ENABLED START -----#

        attr.set_value(self.attr_CountTimeMax_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.CountTimeMax_read

    def read_CountTimeMin(self, attr):
        self.debug_stream("In read_CountTimeMin()")
        #----- PROTECTED REGION ID(EigerDectris.CountTimeMin_read) ENABLED START -----#

        attr.set_value(self.attr_CountTimeMin_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.CountTimeMin_read

    def read_FrameTimeMax(self, attr):
        self.debug_stream("In read_FrameTimeMax()")
        #----- PROTECTED REGION ID(EigerDectris.FrameTimeMax_read) ENABLED START -----#

        attr.set_value(self.attr_FrameTimeMax_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.FrameTimeMax_read

    def read_FrameTimeMin(self, attr):
        self.debug_stream("In read_FrameTimeMin()")
        #----- PROTECTED REGION ID(EigerDectris.FrameTimeMin_read) ENABLED START -----#
        attr.set_value(self.attr_FrameTimeMin_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.FrameTimeMin_read

    def read_PhotonEnergyMax(self, attr):
        self.debug_stream("In read_PhotonEnergyMax()")
        #----- PROTECTED REGION ID(EigerDectris.PhotonEnergyMax_read) ENABLED START -----#

        attr.set_value(self.attr_PhotonEnergyMax_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.PhotonEnergyMax_read

    def read_PhotonEnergyMin(self, attr):
        self.debug_stream("In read_PhotonEnergyMin()")
        #----- PROTECTED REGION ID(EigerDectris.PhotonEnergyMin_read) ENABLED START -----#

        attr.set_value(self.attr_PhotonEnergyMin_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.PhotonEnergyMin_read

    def read_EnergyThresholdMax(self, attr):
        self.debug_stream("In read_EnergyThresholdMax()")
        #----- PROTECTED REGION ID(EigerDectris.EnergyThresholdMax_read) ENABLED START -----#
        attr.set_value(self.attr_EnergyThresholdMax_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.EnergyThresholdMax_read

    def read_EnergyThresholdMin(self, attr):
        self.debug_stream("In read_EnergyThresholdMin()")
        #----- PROTECTED REGION ID(EigerDectris.EnergyThresholdMin_read) ENABLED START -----#

        attr.set_value(self.attr_EnergyThresholdMin_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.EnergyThresholdMin_read

    def read_Time(self, attr):
        self.debug_stream("In read_Time()")
        #----- PROTECTED REGION ID(EigerDectris.Time_read) ENABLED START -----#

        self.attr_Time_read = self.det.detector_time
        attr.set_value(self.attr_Time_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Time_read

    def read_MustArmFlag(self, attr):
        self.debug_stream("In read_MustArmFlag()")
        #----- PROTECTED REGION ID(EigerDectris.MustArmFlag_read) ENABLED START -----#

        attr.set_value(self.attr_MustArmFlag_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.MustArmFlag_read

    def read_NbTriggers(self, attr):
        self.debug_stream("In read_NbTriggers()")
        #----- PROTECTED REGION ID(EigerDectris.NbTriggers_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_NbTriggers_read = self.det.ntrigger
        attr.set_value(self.attr_NbTriggers_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbTriggers_read

    def write_NbTriggers(self, attr):
        self.debug_stream("In write_NbTriggers()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.NbTriggers_write) ENABLED START -----#

        if data > self.attr_NbTriggersMax_read or data < self.attr_NbTriggersMin_read:
            raise Exception("Value %f out of limits (%e, %e)" % (data, self.attr_NbTriggersMin_read, self.attr_NbTriggersMax_read))
        self.det.ntrigger = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbTriggers_write

    def read_NbTriggersMax(self, attr):
        self.debug_stream("In read_NbTriggersMax()")
        #----- PROTECTED REGION ID(EigerDectris.NbTriggersMax_read) ENABLED START -----#
        attr.set_value(self.attr_NbTriggersMax_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbTriggersMax_read

    def read_NbTriggersMin(self, attr):
        self.debug_stream("In read_NbTriggersMin()")
        #----- PROTECTED REGION ID(EigerDectris.NbTriggersMin_read) ENABLED START -----#

        attr.set_value(self.attr_NbTriggersMin_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.NbTriggersMin_read

    def read_CountTimeInte(self, attr):
        self.debug_stream("In read_CountTimeInte()")
        #----- PROTECTED REGION ID(EigerDectris.CountTimeInte_read) ENABLED START -----#

        attr.set_value(self.attr_CountTimeInte_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.CountTimeInte_read

    def write_CountTimeInte(self, attr):
        self.debug_stream("In write_CountTimeInte()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.CountTimeInte_write) ENABLED START -----#

        self.attr_CountTimeInte_read = data

        #----- PROTECTED REGION END -----#	//	EigerDectris.CountTimeInte_write

    def read_DownloadDirectory(self, attr):
        self.debug_stream("In read_DownloadDirectory()")
        #----- PROTECTED REGION ID(EigerDectris.DownloadDirectory_read) ENABLED START -----#

        attr.set_value(self.attr_DownloadDirectory_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.DownloadDirectory_read

    def write_DownloadDirectory(self, attr):
        self.debug_stream("In write_DownloadDirectory()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.DownloadDirectory_write) ENABLED START -----#

        self.attr_DownloadDirectory_read = data

        #----- PROTECTED REGION END -----#	//	EigerDectris.DownloadDirectory_write

    def read_DcuBufferFree(self, attr):
        self.debug_stream("In read_DcuBufferFree()")
        #----- PROTECTED REGION ID(EigerDectris.DcuBufferFree_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_DcuBufferFree_read = self.det.dcu_buffer_free
        attr.set_value(self.attr_DcuBufferFree_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.DcuBufferFree_read

    def read_BeamCenterX(self, attr):
        self.debug_stream("In read_BeamCenterX()")
        #----- PROTECTED REGION ID(EigerDectris.BeamCenterX_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_BeamCenterX_read = self.det.beam_center_x
        attr.set_value(self.attr_BeamCenterX_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.BeamCenterX_read

    def write_BeamCenterX(self, attr):
        self.debug_stream("In write_BeamCenterX()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.BeamCenterX_write) ENABLED START -----#

        self.det.beam_center_x = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.BeamCenterX_write

    def read_BeamCenterY(self, attr):
        self.debug_stream("In read_BeamCenterY()")
        #----- PROTECTED REGION ID(EigerDectris.BeamCenterY_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_BeamCenterY_read = self.det.beam_center_y
        attr.set_value(self.attr_BeamCenterY_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.BeamCenterY_read

    def write_BeamCenterY(self, attr):
        self.debug_stream("In write_BeamCenterY()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.BeamCenterY_write) ENABLED START -----#

        self.det.beam_center_y = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.BeamCenterY_write

    def read_DetectorDistance(self, attr):
        self.debug_stream("In read_DetectorDistance()")
        #----- PROTECTED REGION ID(EigerDectris.DetectorDistance_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_DetectorDistance_read = self.det.detector_distance
        attr.set_value(self.attr_DetectorDistance_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.DetectorDistance_read

    def write_DetectorDistance(self, attr):
        self.debug_stream("In write_DetectorDistance()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.DetectorDistance_write) ENABLED START -----#

        self.det.detector_distance = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.DetectorDistance_write

    def read_OmegaIncrement(self, attr):
        self.debug_stream("In read_OmegaIncrement()")
        #----- PROTECTED REGION ID(EigerDectris.OmegaIncrement_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_OmegaIncrement_read = self.det.omega_increment
        attr.set_value(self.attr_OmegaIncrement_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.OmegaIncrement_read

    def write_OmegaIncrement(self, attr):
        self.debug_stream("In write_OmegaIncrement()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.OmegaIncrement_write) ENABLED START -----#

        self.det.omega_increment = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.OmegaIncrement_write

    def read_OmegaStart(self, attr):
        self.debug_stream("In read_OmegaStart()")
        #----- PROTECTED REGION ID(EigerDectris.OmegaStart_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_OmegaStart_read = self.det.omega_start
        attr.set_value(self.attr_OmegaStart_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.OmegaStart_read

    def write_OmegaStart(self, attr):
        self.debug_stream("In write_OmegaStart()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.OmegaStart_write) ENABLED START -----#

        self.det.omega_start = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.OmegaStart_write

    def read_Compression(self, attr):
        self.debug_stream("In read_Compression()")
        #----- PROTECTED REGION ID(EigerDectris.Compression_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_Compression_read = self.det.compression
        attr.set_value(self.attr_Compression_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Compression_read

    def write_Compression(self, attr):
        self.debug_stream("In write_Compression()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.Compression_write) ENABLED START -----#

        self.det.compression = data
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.Compression_write

    def read_RoiMode(self, attr):
        self.debug_stream("In read_RoiMode()")
        #----- PROTECTED REGION ID(EigerDectris.RoiMode_read) ENABLED START -----#

        if self.flag_arm == 0 and self.get_state() != PyTango.DevState.MOVING:
            self.attr_RoiMode_read = self.det.roi_mode
        attr.set_value(self.attr_RoiMode_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.RoiMode_read

    def write_RoiMode(self, attr):
        self.debug_stream("In write_RoiMode()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(EigerDectris.RoiMode_write) ENABLED START -----#

        self.det.roi_mode = data
        self.attr_XPixelsDetector_read = self.det.x_pixels_detector
        self.attr_YPixelsDetector_read = self.det.y_pixels_detector
        self.attr_MustArmFlag_read = 1

        #----- PROTECTED REGION END -----#	//	EigerDectris.RoiMode_write

    def read_XPixelSize(self, attr):
        self.debug_stream("In read_XPixelSize()")
        #----- PROTECTED REGION ID(EigerDectris.XPixelSize_read) ENABLED START -----#

        attr.set_value(self.attr_XPixelSize_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.XPixelSize_read

    def read_YPixelSize(self, attr):
        self.debug_stream("In read_YPixelSize()")
        #----- PROTECTED REGION ID(EigerDectris.YPixelSize_read) ENABLED START -----#

        attr.set_value(self.attr_YPixelSize_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.YPixelSize_read

    def read_XPixelsDetector(self, attr):
        self.debug_stream("In read_XPixelsDetector()")
        #----- PROTECTED REGION ID(EigerDectris.XPixelsDetector_read) ENABLED START -----#
        self.attr_XPixelsDetector_read = self.det.x_pixels_detector
        attr.set_value(self.attr_XPixelsDetector_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.XPixelsDetector_read

    def read_YPixelsDetector(self, attr):
        self.debug_stream("In read_YPixelsDetector()")
        #----- PROTECTED REGION ID(EigerDectris.YPixelsDetector_read) ENABLED START -----#
        self.attr_YPixelsDetector_read = self.det.y_pixels_detector
        attr.set_value(self.attr_YPixelsDetector_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.YPixelsDetector_read

    def read_FilesInBuffer(self, attr):
        self.debug_stream("In read_FilesInBuffer()")
        #----- PROTECTED REGION ID(EigerDectris.FilesInBuffer_read) ENABLED START -----#

        self.attr_FilesInBuffer_read = []
        nb_files = 0
        for file_name in self.det.buffer.files:
            self.attr_FilesInBuffer_read.append(str(file_name))
            nb_files = nb_files + 1

        attr.set_value(self.attr_FilesInBuffer_read, nb_files)

        #----- PROTECTED REGION END -----#	//	EigerDectris.FilesInBuffer_read

    def read_Error(self, attr):
        self.debug_stream("In read_Error()")
        #----- PROTECTED REGION ID(EigerDectris.Error_read) ENABLED START -----#

        self.attr_Error_read = []
        for line in self.det.error:
            self.attr_Error_read.append(line)

        attr.set_value(self.attr_Error_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.Error_read

    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(EigerDectris.read_attr_hardware) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	EigerDectris.read_attr_hardware

    # -------------------------------------------------------------------------
    #    EigerDectris command methods
    # -------------------------------------------------------------------------

    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(EigerDectris.State) ENABLED START -----#

        # Workaround: this might get fixed in api v1.8.x
        self.det.status_update()

        rstate = self.det.get_state()

        if self.flag_arm:
            if rstate == "configure" or rstate == "idle":
                self.flag_arm = 0

        if rstate == "error":
            self.set_state(PyTango.DevState.FAULT)
        elif (rstate == "na"):
            self.set_state(PyTango.DevState.OFF)
        elif (rstate != "idle" and rstate != "ready"):
            self.set_state(PyTango.DevState.MOVING)
        elif rstate == 'acquire':
            self.set_state(PyTango.DevState.MOVING)
        else:
            self.set_state(PyTango.DevState.ON)

        argout = self.get_state()

        #----- PROTECTED REGION END -----#	//	EigerDectris.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()

    def dev_status(self):
        """ This command gets the device status (stored in its device_status data member) and returns it to the caller.
        :return: Device status
        :rtype: PyTango.ConstDevString
        """
        self.debug_stream("In dev_status()")
        argout = ""
        #----- PROTECTED REGION ID(EigerDectris.Status) ENABLED START -----#

        # Workaround: this might get fixed in api v1.8.x
        self.det.status_update()

        rstate = self.det.get_state()

        if rstate == "na":
            rstate = rstate + ". The detector was rebooted and \n has to be initialized"
        self.argout = str(rstate)

        if self.get_status() == "busy":
            self.argout = "busy"  # never override busy status

        #----- PROTECTED REGION END -----#	//	EigerDectris.Status
        self.set_status(self.argout)
        self.__status = PyTango.Device_4Impl.dev_status(self)
        return self.__status

    def Arm(self):
        """ Arm detector.
        """
        self.debug_stream("In Arm()")
        #----- PROTECTED REGION ID(EigerDectris.Arm) ENABLED START -----#

        rstate = self.det.get_state()

        if rstate != "ready":
            self.flag_arm = 1
            self.det.arm()
            self.attr_MustArmFlag_read = 0
            # Prepare trigger detection (undocumented)
            if "ext" in self.attr_TriggerMode_read.lower():
                try:
                    self.det.wait(timeout=0.1)
                except Exception as exc:
                    # Ignore timeout error (wait is a blocking command)
                    pass
        #----- PROTECTED REGION END -----#	//	EigerDectris.Arm

    def Trigger(self):
        """ Trigger the detector.
        """
        self.debug_stream("In Trigger()")
        #----- PROTECTED REGION ID(EigerDectris.Trigger) ENABLED START -----#

        rstate = self.det.get_state()

        if rstate != "ready":
            raise Exception("Detector in %s state, not 'ready',  try the arm command first" % str(rstate))

        try:
            if self.det.trigger_mode == "inte":
                self.det.trigger(timeout=1.5, input_value=self.attr_CountTimeInte_read)
            else:
                self.det.trigger(timeout=1.5)
        except:
            pass

        #----- PROTECTED REGION END -----#	//	EigerDectris.Trigger

    def Abort(self):
        """ Abort all operations and reset the detector system.
        """
        self.debug_stream("In Abort()")
        #----- PROTECTED REGION ID(EigerDectris.Abort) ENABLED START -----#

        self.det.abort()

        #----- PROTECTED REGION END -----#	//	EigerDectris.Abort

    def Cancel(self):
        """ Stop data acquisition after the current image.
        """
        self.debug_stream("In Cancel()")
        #----- PROTECTED REGION ID(EigerDectris.Cancel) ENABLED START -----#

        self.det.cancel()

        #----- PROTECTED REGION END -----#	//	EigerDectris.Cancel

    def ClearBuffer(self):
        """ Delete all files from buffer
        """
        self.debug_stream("In ClearBuffer()")
        #----- PROTECTED REGION ID(EigerDectris.ClearBuffer) ENABLED START -----#

        self.det.buffer.clear_buffer()

        #----- PROTECTED REGION END -----#	//	EigerDectris.ClearBuffer

    def DeleteFileFromBuffer(self, argin):
        """ Delete the file give the argument name from the buffer
        :param argin: Name of the file to delete
        :type argin: PyTango.DevString
        """
        self.debug_stream("In DeleteFileFromBuffer()")
        #----- PROTECTED REGION ID(EigerDectris.DeleteFileFromBuffer) ENABLED START -----#

        self.det.buffer.delete_file(argin)

        #----- PROTECTED REGION END -----#	//	EigerDectris.DeleteFileFromBuffer

    def Disarm(self):
        """ Disarm detector
        """
        self.debug_stream("In Disarm()")
        #----- PROTECTED REGION ID(EigerDectris.Disarm) ENABLED START -----#

        rstate = self.det.get_state()
        if rstate != "idle":
            self.flag_arm = 0
            self.det.disarm()

        #----- PROTECTED REGION END -----#	//	EigerDectris.Disarm

    def DownloadFilesFromBuffer(self, argin):
        """ Download the file with the given name or the files matching the given
        pattern (with * for glob expansion).
        :param argin: Filename or pattern
        :type argin: PyTango.DevString
        """
        self.debug_stream("In DownloadFilesFromBuffer()")
        #----- PROTECTED REGION ID(EigerDectris.DownloadFilesFromBuffer) ENABLED START -----#
        self.det.buffer.download(argin, self.attr_DownloadDirectory_read)

        #----- PROTECTED REGION END -----#	//	EigerDectris.DownloadFilesFromBuffer

    #----- PROTECTED REGION ID(EigerDectris.programmer_methods) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	EigerDectris.programmer_methods


class EigerDectrisClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(EigerDectris.global_class_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	EigerDectris.global_class_variables

    #    Class Properties
    class_property_list = {
    }

    #    Device Properties
    device_property_list = {
        'Host':
            [PyTango.DevString,
            "Host name",
            []],
        'PortNb':
            [PyTango.DevLong,
            "Port number",
            [80]],
        'APIVersion':
            [PyTango.DevString,
            "API Version, ex. 1.0.0",
            ["1.0.0"]],
    }

    #    Command definitions
    cmd_list = {
        'Arm':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Trigger':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Abort':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Cancel':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'ClearBuffer':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'DeleteFileFromBuffer':
            [[PyTango.DevString, "Name of the file to delete"],
            [PyTango.DevVoid, "none"]],
        'Disarm':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'DownloadFilesFromBuffer':
            [[PyTango.DevString, "Filename or pattern"],
            [PyTango.DevVoid, "none"]],
    }

    #    Attribute definitions
    attr_list = {
        'NbImages':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Number of images per serie",
            }],
        'Temperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "Celsius",
                'description': "Board temperature",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'Humidity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "%",
                'description': "Returns the relative humidity reading (in percent)",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'CountTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "s",
                'description': "Currently set count time per image in seconds",
            }],
        'FrameTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "s",
                'description': "Currently set frame time (count time plus read out time) per image in seconds.",
            }],
        'PhotonEnergy':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "eV",
                'description': "Currently set photon energy in electron volts",
            }],
        'Wavelength':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "A",
                'description': "Currently set photon wavelength in Angstrom.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'EnergyThreshold':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "eV",
                'description': "Currently set energy threshold in electron volts.",
            }],
        'FlatfieldEnabled':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "1 if the flatfield correction is enabled.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'AutoSummationEnabled':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "1 if the auto summation feature (to increase the dynamic range) is enabled.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'TriggerMode':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Current trigger mode. Following trigger modes are supported:\nexpo, extt, extm, exte, exts, ints",
            }],
        'RateCorrectionEnabled':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "1 if the rate correction is enabled.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'BitDepth':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Detector  bit depth, i.e. the dynamic range.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'ReadoutTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "s",
                'description': "detector`s readout time per image",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'Description':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Detector description, i.e. the model.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'NbImagesMax':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Number of images per serie",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'NbImagesMin':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Number of images per serie",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'CountTimeMax':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "s",
                'description': "Currently set count time per image in seconds",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'CountTimeMin':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "s",
                'description': "Currently set count time per image in seconds",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'FrameTimeMax':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "s",
                'description': "Currently set frame time (count time plus read out time) per image in seconds.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'FrameTimeMin':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "s",
                'description': "Currently set frame time (count time plus read out time) per image in seconds.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'PhotonEnergyMax':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "eV",
                'description': "Currently set photon energy in electron volts",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'PhotonEnergyMin':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "eV",
                'description': "Currently set photon energy in electron volts",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'EnergyThresholdMax':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "eV",
                'description': "Currently set energy threshold in electron volts.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'EnergyThresholdMin':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "eV",
                'description': "Currently set energy threshold in electron volts.",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'Time':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Actual system time",
                'Display level': PyTango.DispLevel.EXPERT,
            }],
        'MustArmFlag':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value': "1",
                'min value': "0",
                'description': "1 if any parameters have been changed and the command arm should be run.",
            }],
        'NbTriggers':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Allowed number of trigger per arm/disarm sequence",
            }],
        'NbTriggersMax':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ]],
        'NbTriggersMin':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ]],
        'CountTimeInte':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Count time send with trigger if trigger mode is inte",
                'Memorized': "true"
            }],
        'DownloadDirectory':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Name of the directory for downloading the files with the command DownloadFilesFromBuffer",
                'Memorized': "true"
            }],
        'DcuBufferFree':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "%",
                'description': "Percentage of available buffer space on the DCU.",
            }],
        'BeamCenterX':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "pixels",
                'description': "Currently set beam center horizontal position.",
            }],
        'BeamCenterY':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "pixels",
                'description': "Currently set beam center vertical position.",
            }],
        'DetectorDistance':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "mm",
                'description': "Currently set sample to detector distance.",
            }],
        'OmegaIncrement':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "deg",
                'description': "Currently set omega imcrement per frame.",
            }],
        'OmegaStart':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "deg",
                'description': "Currently set omega start angle.",
            }],
        'Compression':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Name of files in detector data directory",
            }],
        'RoiMode':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Current roi mode. Following compression modes are supported:\n4M, 16M",
            }],
        'XPixelSize':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "size of a pixel along x-axis",
            }],
        'YPixelSize':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "size of a pixel along y-axis",
            }],
        'XPixelsDetector':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "number of pizels along x-axis",
            }],
        'YPixelsDetector':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "number of pixels along y-axis",
            }],
        'FilesInBuffer':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 100000],
            {
                'description': "Name of files in detector data directory",
            }],
        'Error':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 100],
            {
                'description': "List of status parameters causing error condition",
            }],
    }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(EigerDectrisClass, EigerDectris, 'EigerDectris')
        #----- PROTECTED REGION ID(EigerDectris.add_classes) ENABLED START -----#
        try:
            py.add_class(EigerFilewriter.EigerFilewriterClass, EigerFilewriter.EigerFilewriter, 'EigerFilewriter')
        except:
            print "Error adding class EigerFilewriter. Device will not be created"

        try:
            py.add_class(EigerMonitor.EigerMonitorClass, EigerMonitor.EigerMonitor, 'EigerMonitor')
        except:
            print "Error adding class EigerMonitor. Device will not be created"

        try:
            py.add_class(EigerHiDRAClient.EigerHiDRAClientClass, EigerHiDRAClient.EigerHiDRAClient, 'EigerHiDRAClient')
        except:
            print "Error adding class EigerHiDRAClient. Device will not be created"

        #----- PROTECTED REGION END -----#	//	EigerDectris.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
